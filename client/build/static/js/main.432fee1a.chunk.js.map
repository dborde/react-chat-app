{"version":3,"sources":["components/rooms.js","pages/join.js","components/loader.js","components/messages.js","components/users.js","pages/chat.js","App.js","serviceWorker.js","index.js"],"names":["Rooms","props","Fragment","rooms","map","room","index","key","ActiveRooms","className","onClick","switchRoom","socket","io","initialState","username","Join","onInputUpdate","e","name","target","value","setState","join","state","history","push","on","this","placeholder","autoComplete","onChange","type","list","id","Component","withRouter","LoaderSkeleton","count","height","borderRadius","width","widthRandomness","color","Messages","data","obj","createdAt","url","href","rel","message","Users","users","disabled","fetchingLocation","isSideBarActive","messages","Chat","autoscroll","$messagesWrap","document","querySelector","$messages","$newMessage","lastElementChild","newMessageStyles","getComputedStyle","newMessageMargin","parseInt","marginBottom","newMessageHeight","offsetHeight","visibleHeight","scrollHeight","scrollTop","toggleSideBar","handleSubmit","preventDefault","emit","error","clearForm","console","log","newroom","match","params","window","location","sendLocation","navigator","geolocation","alert","getCurrentPosition","position","lat","coords","latitude","long","longitude","textInput","React","createRef","text","moment","format","current","focus","style","innerHeight","onSubmit","ref","alt","title","App","site_loaded","classNames","path","component","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.432fee1a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Rooms = (props) => {\n  return (\n    <React.Fragment>\n      {props.rooms.map((room, index) => typeof room !== 'undefined' ? (\n        <option key={index}>{room}</option>\n      ) : null )}\n    </React.Fragment>\n  )\n}\n\nexport const ActiveRooms = (props) => {\n  return (\n    <React.Fragment>\n      <h3 className=\"list-title\">Active Rooms</h3>\n      <ul className=\"rooms\">\n      {props.rooms.map((room, index) => typeof room !== 'undefined' ? (\n        <li className=\"switch-room\" key={index}><button onClick={()=>props.switchRoom(room)}>{room}</button></li>\n      ) : null )}\n      </ul>\n    </React.Fragment>\n  )\n}","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport { Rooms } from \"../components/rooms\";\n\nconst ENDPOINT = \"http://localhost:5000\";\nconst socket = io(ENDPOINT);\n\nconst initialState = { \n  room: '',\n  rooms: [],\n  username: ''\n}\n\nclass Join extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...initialState\n    }\n  }\n\n  componentDidMount() {\n    socket.on('roomsList', ( {rooms} ) => {\n      this.setState({rooms});\n    });\n  }\n\n  clearForm() {\n    this.setState({\n      ...initialState\n    });\n  }\n\n  onInputUpdate = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  join = () => {\n    const { username, room } = this.state;\n    if (username && room) {\n      this.props.history.push(`/chat/${username}/${room}`)\n    }\n  }\n\n  render() {\n    const { room, rooms, username } = this.state;\n    return (\n      <div className=\"row\">\n        <div className=\"col-xs\">\n          <form className=\"centered-form__box\">\n            <h2>Join</h2>\n            <input name=\"username\" placeholder=\"Display name\" autoComplete=\"off\" value={username} onChange={this.onInputUpdate} />\n            <input type=\"text\" list=\"rooms\" name=\"room\" placeholder=\"Room\" autoComplete=\"off\" value={room} onChange={this.onInputUpdate} />\n            <datalist id=\"rooms\">\n              <Rooms rooms={rooms} />\n            </datalist>\n            <button onClick={this.join}>Join</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Join);\n","import React from \"react\";\n\nimport Skeleton from \"react-skeleton-loader\";\n\nconst LoaderSkeleton = ({ count = 1, height = \"3rem\" }) => (\n  <Skeleton\n    borderRadius={0}\n    width=\"100%\"\n    widthRandomness={0}\n    color=\"#d8d8d8\"\n    height={height}\n    count={count}\n  />\n);\n\nexport default LoaderSkeleton;\n","import React from 'react';\n\nconst Messages = (props) => {\n  return (<div>\n    {props.data.map((obj, index) => typeof obj.username !== 'undefined' ? (\n      <div key={index} className=\"message\">\n      <p>\n        <span className=\"message__name\">{obj.username}</span>\n        <span className=\"message__meta\">{obj.createdAt}</span>\n      </p>\n      {obj.url ? (<p><a href={obj.url} target=\"_blank\" rel=\"noopener noreferrer\">My current location</a></p>) : (<p>{obj.message}</p>) }\n    </div>\n    ) : null )}\n    </div>);\n  }\n\n  export default Messages;\n","import React from 'react';\n\nconst Users = (props) => {\n  return (\n    <React.Fragment>\n      <h2 className=\"room-title\">{props.room}</h2>\n      <h3 className=\"list-title\">Users</h3>\n      <ul className=\"users\">\n        {props.users.map((obj, index) => (\n          <li key={index}>{obj.username}</li>\n          ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default Users;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport LoaderSkeleton from \"../components/loader\";\nimport moment from \"moment\";\nimport Messages from \"../components/messages\";\nimport Users from \"../components/users\";\nimport { ActiveRooms } from \"../components/rooms\";\n\nconst ENDPOINT = \"http://localhost:5000\";\nconst socket = io(ENDPOINT);\n\nconst initialState = {\n  disabled: false,\n  fetchingLocation: false,\n  isSideBarActive: false,\n  message: '',\n  messages: [],\n  room: '',\n  rooms: [],\n  users: []\n}\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.state = {\n      ...initialState\n    }\n  }\n\n  componentDidMount() {\n    const params = {\n      username: this.props.match.params.username,\n      room: this.props.match.params.room\n    }\n    socket.emit('join', params, (error) => {\n      if (error) {\n        alert(error);\n        // this.props.history.push('/');\n        window.location.href = '/';\n      }\n    });\n\n    socket.on('message', (message) => {\n      const data = {\n        username: message.username,\n        message: message.text,\n        createdAt: moment(message.createdAt).format('h:mm a')\n      }\n      this.textInput?.current && this.textInput.current.focus();\n      this.setState({messages: [...this.state.messages, data]}, () => this.autoscroll());\n    });\n\n    socket.on('locationMessage', (message) => {\n      const data = {\n        username: message.username,\n        url: message.url,\n        createdAt: moment(message.createdAt).format('h:mm a')\n      }\n      this.setState({messages: [...this.state.messages, data]}, () => this.autoscroll());\n    });\n\n    socket.on('roomData', ({room, users}) => {\n      this.setState({users, room});\n    });\n\n    socket.on('roomsList', ({rooms}) => {\n      this.setState({rooms});\n    });\n  }\n\n\n  autoscroll = () => {\n    const $messagesWrap = document.querySelector('#messages');\n    const $messages = document.querySelector('#messages div');\n    // New message element\n    const $newMessage = $messages.lastElementChild;\n    if ($newMessage !== null) {\n      // Height of the new message\n      const newMessageStyles = getComputedStyle($newMessage);\n      const newMessageMargin = parseInt(newMessageStyles.marginBottom);\n      const newMessageHeight = $newMessage.offsetHeight + newMessageMargin;\n\n      // Visible height\n      const visibleHeight =  $messagesWrap.offsetHeight;\n\n      // Height of messages container\n      const containerHeight = $messages.scrollHeight;\n      \n      // How far have I scrolled\n      const scrollOffset = $messagesWrap.scrollTop + visibleHeight;\n   \n      if (containerHeight - newMessageHeight <= scrollOffset) {\n        // scroll to bottom\n        $messagesWrap.scrollTop = $messagesWrap.scrollHeight\n      }\n    }\n  }\n\n  join = () => {\n    const { username, room } = this.state;\n    if (username && room) {\n      this.props.history.push(`/chat/${username}/${room}`)\n    }\n  }\n\n  toggleSideBar = () => {\n    this.setState({isSideBarActive: !this.state.isSideBarActive})\n  }\n\n  onInputUpdate = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  clearForm() {\n    this.setState({\n        message: ''\n    });\n  } \n\n  handleSubmit = e => {\n    e.preventDefault();\n    const message = this.state.message;\n    this.setState({ disabled: true });\n    socket.emit('sendMessage', message, (error) => {\n      this.setState({ disabled: false });\n      this.clearForm();\n\n       if (error) {\n        return console.log(error)\n      }\n    })  \n  };\n\n  switchRoom = (newroom) => {\n    const username = this.props.match.params.username\n    \n    socket.emit('switchRoom', username, newroom );\n\n    // this.props.history.push(`/chat/${username}/${newroom}`)\n    window.location.href = `/chat/${username}/${newroom}`\n    \n  }\n\n  sendLocation = e => {\n    e.preventDefault();\n    if (!navigator.geolocation) {\n      return alert('Geolocation is not supported by your browser.')\n    }\n    \n    this.setState({ disabled: true, fetchingLocation: true });\n  \n    navigator.geolocation.getCurrentPosition((position) => {\n      socket.emit('sendLocation', {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      }, () => {\n        this.setState({ disabled: false, fetchingLocation: false });\n      })\n    });\n  }\n\n  render() {\n    const { disabled, fetchingLocation, isSideBarActive, message, messages, room, rooms, users } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"chat\" style={{height: window.innerHeight}}>\n          <i onClick={this.toggleSideBar} className={`mobile-menu fas fa-bars ${isSideBarActive ? \"active\" : \"\"}`}></i>\n          <div id=\"sidebar\" className={`chat__sidebar ${isSideBarActive ? \"active\" : \"\"}`} style={{height: window.innerHeight}}>\n            <div id=\"sidebar-users\">\n              <Users users={users} room={room}/>\n            </div>\n            <div id=\"sidebar-rooms\">\n              <ActiveRooms rooms={rooms} switchRoom={this.switchRoom}/>\n            </div>\n          </div>\n\n          <div className={`chat__main ${isSideBarActive ? \"active\" : \"\"}`}>\n            {fetchingLocation && <LoaderSkeleton height={`${window.innerHeight}px`} />}\n            <div id=\"messages\" className=\"chat__messages\">\n              <Messages data={messages} />\n            </div>\n            <div className=\"compose\" onSubmit={(e) => this.handleSubmit(e)}>\n              <form id=\"message-form\">\n                <input\n                  name=\"message\"\n                  placeholder=\"Type your message...\"\n                  autoComplete=\"off\"\n                  value={message}\n                  onChange={this.onInputUpdate}\n                  ref={this.textInput}\n                />\n                <div className=\"btnWrap\">\n                  <button disabled={disabled} type=\"submit\" className=\"btn\">\n                    <i className=\"tooltip fab fa-telegram-plane\" alt=\"send message\" title=\"send message\">\n                      <span className=\"tooltiptext\">Send Message</span>\n                    </i>\n                  </button>\n                  <button disabled={disabled} id=\"send-location\" className=\"btn\" onClick={(e) => this.sendLocation(e)}>\n                    <i className=\"tooltip far fa-compass\" alt=\"send location\" title=\"send location\">\n                      <span className=\"tooltiptext\">Send Location</span>\n                    </i>         \n                  </button>\n                </div>    \n              </form>\n            </div>\n\n          </div>\n\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Chat);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport classNames from 'classnames';\nimport Join from './pages/join';\nimport Chat from './pages/chat';\nimport \"../src/assets/styles/_grid.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      site_loaded: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      site_loaded: true\n    });\n  }\n\n  render() {\n    return (\n      <div className={classNames({'App': true, 'site_loaded': this.state.site_loaded})}>\n        <Router>\n            <Switch>\n              <Route path=\"/chat/:username/:room\" component={Chat} />\n              <Route path=\"/\" component={Join} />\n            </Switch>\n          </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}